# Configuration for the SPARC v2 system with plates:
# * VisNIR lens
# * Optical Fiber plate
# * Kymera 193i with AR camera (Zyla) + IR spectrometer (iDus)
# * Time correlator (aka Labcube)

SPARC2-VisNIR-TR: {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Calibration Light",
               "Optical Path Properties", "Slit", "Lens1 Mover", "Lens2 Switch",
               "Fiber align", "Spectrometer Selector",
               "Spectrograph", "Spectrograph focus", "Spec Filter Wheel", "Spec CCD Flipper",
               "Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer",
               "Time Correlator", "Photon counter sync", "Photon counter signal",
               "TC Filter Wheel", "TC Optical Density Filter", "Shutter 0", "Shutter 1",
               "Mirror Actuators", "Mirror Actuators in XY referential",
              ],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer",
              "Time Correlator", "Photon counter sync", "Photon counter signal"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
#        port: "/dev/fake", # for simulator
        port: "/dev/ttyPMT*",
        pin_map: {
            "Camera": 0,
            "Spectrograph": 2,
            "Optical Actuators": 4,
            "Calibration Light": 6,
        },
        delay: { # Time it takes (in s) before a component is accessible
            "Calibration Light": 1, # To turn on/off the light, with most bulbs it's very fast, TODO: check
            "Camera": 2,
            "Spectrograph": 90, # SR-193 needs a looong time to initialise
            "Optical Actuators": 2,
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Calibration Light": True, # turn if on initially, to warm up. It will automatically be off when the component starts
            "Camera": True,
            "Spectrograph": True,
            "Optical Actuators": True,
        },
        # List of EEPROM IDs (of the plates) which are required to start properly
        # TODO: list the IDS
        ids: [231d29dd02000061,2382af6e020000ba],
    }
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    creator: "SEM Scan Interface",
    role: e-beam,
    init: {
        channels: [1, 0],
        # On Delmic scanning box v2, the voltage is x2, so need to specify twice smaller values than needed.
        limits: [[2.77, -2.77], [1.82, -1.82]],  # V
        park: [-3.5, -3.5], # V
        max_res: [5760, 3840], #px 
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        hfw_nomag: 0.412, # m  # TODO : Compute
        settle_time: 30.e-6, # s  # TODO: Check ****
        #fastpark: True, # move e-beam immediately to the parking spot after last pixel scanned
    },
    properties: {
        scale: [8, 8], # (ratio), start with a pretty fast scan
        dwellTime: 3.e-6, # s
        magnification: 100, # (ratio), start low for a big field of view
    },
    affects: ["SEM Detector", "VisNIR Spectrometer", "Camera", "IR Camera", "IR Spectrometer"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 1,
        limits: [-3, 3], # V
    },
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.32, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [1281, 1119], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       # TODO: update for the Quanta
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    persistent: {
        properties: [polePosition],
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer",
              "Time Correlator", "Photon counter sync", "Photon counter signal"]
}

# Controller for the motors moving the various parts of the optical box
# DIP must be configured with address 2 (= 0100000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/ttyTMCM*",
        #port: "/dev/fake6",
        address: 2,
        #address: null,
        axes: ["l1", "l2", "spec-sel", "fiby", "slit"],
        # These values only need to be roughly correct
        ustepsize: [25.1e-9, 25.1e-9, 25.1e-9, 5.86e-9, 5.e-9], # m/µstep
        unit: ["m", "m", "m", "m", "m"],
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "spec-sel": 4, "fiby": 4},
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    children: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.0260687345} # m
    },
    affects: ["Lens2 Switch"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -0.0500000283: "on",
            0.0: "off", # completely out of the path
        },
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer",
              "Time Correlator", "Photon counter sync", "Photon counter signal"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    children: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"],
}

# Note that the next two components actually move the _same_ axis!
# Mirror & Lens in Plate 2, to change X&Y of fiber alignment
"Fiber align": {
    class: actuator.MultiplexActuator,
    role: "fiber-aligner",
    children: {"x": "Optical Actuators", "y": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel", "y": "fiby"},
        ref_on_init: ["y"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        # TODO put correct value
        #FAV_POS_ACTIVE: {"y": -0.00081889984} # m
        FAV_POS_ACTIVE: {"y": 0.00172748112} # m
    },
    affects: ["Time Correlator", "Photon counter sync", "Photon counter signal"],
}

# Mirror in Plate 2, selects between spectrometer and external optics (time-correlator)
"Spectrometer Selector": {
    class: actuator.MultiplexActuator,
    role: "spec-selector",
    children: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Position of the mirror to select the external spectrometer (can be improved by user)
        #FAV_POS_ACTIVE: {"x": 0.0111871202}, # m
        FAV_POS_ACTIVE: {"x": 0.0081371941}, # m
        FAV_POS_ACTIVE_DEST: ["Fiber align", "Time Correlator", "Photon counter sync", "Photon counter signal"],
        FAV_POS_DEACTIVE: {"x": 0.035419}, # m
        FAV_POS_DEACTIVE_DEST: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"], # m
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer", "Time Correlator", "Photon counter sync", "Photon counter signal"],
}

# Internal Spectrograph = Kymera 193 (+ 2 cameras)
"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    init: {
        device: 0,
        slits: {1: "slit-in", # INPUT_SIDE
        },
        bands: { # The filters in the filter-wheel
            1: "pass-through",
            2: [475.e-9, 525.e-9], # pos -> m,m
            3: [525.e-9, 575.e-9],
            4: [575.e-9, 625.e-9],
            5: [625.e-9, 675.e-9],
            6: [675.e-9, 725.e-9],
        },
        fstepsize: 30.e-6, # m, size of one focus step  (Note: it used to be set at 10µm, but from physical inspection 30µm seems more correct)
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"],
}

"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    children: {"z": "Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"],
}

# Provide the filter wheel of the spectrograph as a separate component
"Spec Filter Wheel": {
    class: actuator.MultiplexActuator,
    role: filter,
    children: {"band": "Spectrograph"},
    init: {
        axes_map: {"band": "band"},
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Spec CCD Flipper": {
    class: actuator.FixedPositionsActuator,
    role: "spec-det-selector",
    children: {"rx": "Spectrograph"},
    init: {
        axis_name: "flip-out",
        positions: {
            0: ["Camera", "VisNIR Spectrometer"],
            1.5707963267948966: ["IR Camera", "IR Spectrometer"],
        },
    },
    affects: ["Camera", "VisNIR Spectrometer", "IR Camera", "IR Spectrometer"],
}

# Zyla
"Camera": {
    class: andorcam3.AndorCam3,
    role: ccd0,
    power_supplier: "Power Control Unit",
    init: {
        device: 0,  # The first Andor 3 available (there is only one)
        transp: [-1, -2],
    },
}

# Spectrometer = Andor Zyla + Shamrock SR193 (connected via USB)
"VisNIR Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer0,
    children: {detector: "Camera", spectrograph: "Spectrograph"},
    init: {
        transp: [-1, 2], # only applied to the spectrometer data (not raw CCD)
    },
    properties: {
        binning: [4, 1080],  # 1080 instead of 2160, to acquire only on half of the CCD
    },
}

# iDus
"IR Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd1,
    init: {
        device: 0,
        transp: [1, 2],
    },
    properties: {
        fanSpeed: 1, #water cooled
        targetTemperature: -60, # °C
    },
}

"IR Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    children: {detector: "IR Camera", spectrograph: "Spectrograph"},
}

# DIP must be configured with address 6 (= 0110000)
"Time-Correlator Actuators": {
    class: tmcm.TMCLController,
    role: null,
    init: {
        port: "/dev/ttyTMCM*",
        address: 6,
        axes: ["od", "fw"],
        # These values only need to be roughly correct
        # od: 2.72e-5 rad/ustep, 0.04 -> 4 od = 270° (/360°) -> 2.286e-5 od/ustep
        ustepsize: [2.286e-05, 3.392e-5], # od/µstep, rad/µstep
        rng: [[-0.99999075, 3.00000925], null],
        #rng: [[-3.00000925, 0.99999075], null],
        unit: ["od", "rad"],
        refproc: "Standard",
        refswitch: {"fw": 0, "od": 0},
        inverted: ["od"],
        do_axes: {
            # channel -> axis name, position enabled, position disabled, transition period (s)
            4: ["shutter0", 0, 1, 0.5], #high = open = 0
            5: ["shutter1", 0, 1, 0.5], #low = closed = 1
        },
        # LED protection for digital output channels
        led_prot_do: {
            # VERY IMPORTANT TO GET THIS RIGHT, WRONG VALUE WILL DAMAGE INSTRUMENT!
            4: 1,  # output when leds are on (1 = shutter closed)
            5: 1
        },
    },
}

"TC Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: "tc-filter",
    children: {"band": "Time-Correlator Actuators"},
    init: {
        axis_name: "fw",
        # It supports up to 8 filters
        positions: {
            # pos (rad) -> m,m
            0.027484197:       "pass-through",     # 1
            0.81288236:        [375.e-9, 425.e-9], # 2
            1.598280523:       [425.e-9, 475.e-9], # 3
            2.383674197:       [475.e-9, 525.e-9], # 4
            3.169074197:       [525.e-9, 575.e-9], # 5
            3.954475014:       [575.e-9, 625.e-9], # 6
            4.739874197:       [625.e-9, 675.e-9], # 7
            5.525274197:       [675.e-9, 725.e-9], # 8
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["Time Correlator", "Photon counter sync", "Photon counter signal"],
}

"TC Optical Density Filter": {
    class: actuator.LinearActuator,
    role: "tc-od-filter",
    children: {"density": "Time-Correlator Actuators"},
    init: {
        axis_name: "od",
        offset: -3.00000925, # od, -position when referenced
        ref_start: 2.8, #  a little before the reference (inverted axis)
        ref_period: 10,  # References every 10 moves, put "null" to never reference
    },
    affects: ["Time Correlator", "Photon counter sync", "Photon counter signal"],
}

"Time Correlator": {
    class: picoquant.PH300,
    role: time-correlator,
    init: {
        #device: "fake",
        device: null, # put serial number, or it will pick the first one found
        disc_volt: [50.e-3, 50.e-3], # V, discriminator for detectors 0/1 (< 0.8 V)
        zero_cross: [10.e-3, 10.e-3], # V (< 20 mV)
        shutter_axes: {
        # internal child role of the actuator -> axis name, position when shutter is closed (ie, protected), position when opened (receiving light)
            "shutter0": ["x", 1, 0],
            "shutter1": ["x", 1, 0],
        },
    },
    # These children allow to have access to the raw data on the PMTs
    children: {
        "detector0": "Photon counter sync",
        "detector1": "Photon counter signal",
        "shutter0": "Shutter 0",
        "shutter1": "Shutter 1",
    },
}

"Photon counter sync": {
    # Internal child of "Time Correlator", so no class
    role: photo-detector1,
}

"Photon counter signal": {
    # Internal child of "Time Correlator", so no class
    role: photo-detector0, # det0, to be shown as main graph in GUI
}

"Shutter 0": {
    class: actuator.MultiplexActuator,
    role: "shutter0",
    children: {"x": "Time-Correlator Actuators"},
    init: {
        axes_map: {"x": "shutter0"},
    },
    affects: ["Time Correlator", "Photon counter sync"],
}

"Shutter 1": {
    class: actuator.MultiplexActuator,
    role: "shutter1",
    children: {"x": "Time-Correlator Actuators"},
    init: {
        axes_map: {"x": "shutter1"},
    },
    affects: ["Time Correlator", "Photon counter signal"],
}

# Controller for moving the 'Redux' stage
# DIP must be configured with address 4 (= 0010000)
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/ttyTMCM*",
        address: 4,
        #port: "/dev/fake6",
        #address: null,
        axes: ["l", "s"],
        ustepsize: [5.9e-9, 5.9e-9], # m/µstep
        #ustepsize: [3.e-6,3.e-6], #this is only for sim
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        # TODO: update for Quanta Redux stage
        FAV_POS_ACTIVE: {"l": 0.0476523589, "s": -0.0011969625},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    children: {"orig": "Mirror Actuators"},
    init: {
        # TODO: update for the Quanta
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: 2.181661565, #0.95993108859688, # rad (= 125°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}
